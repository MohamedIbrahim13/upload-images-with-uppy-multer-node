{"id":"../node_modules/@uppy/utils/lib/canvasToBlob.js","dependencies":[{"name":"D:\\Exercise JavaScript\\04_06\\upload-images-node-uppy\\package.json","includedInParent":true,"mtime":1611929450109},{"name":"D:\\Exercise JavaScript\\04_06\\upload-images-node-uppy\\node_modules\\@uppy\\utils\\package.json","includedInParent":true,"mtime":1611924959398},{"name":"./dataURItoBlob","loc":{"line":1,"column":28},"parent":"D:\\Exercise JavaScript\\04_06\\upload-images-node-uppy\\node_modules\\@uppy\\utils\\lib\\canvasToBlob.js","resolved":"D:\\Exercise JavaScript\\04_06\\upload-images-node-uppy\\node_modules\\@uppy\\utils\\lib\\dataURItoBlob.js"}],"generated":{"js":"var dataURItoBlob = require('./dataURItoBlob');\n/**\n * Save a <canvas> element's content to a Blob object.\n *\n * @param {HTMLCanvasElement} canvas\n * @returns {Promise}\n */\n\n\nmodule.exports = function canvasToBlob(canvas, type, quality) {\n  if (canvas.toBlob) {\n    return new Promise(function (resolve) {\n      canvas.toBlob(resolve, type, quality);\n    });\n  }\n\n  return Promise.resolve().then(function () {\n    return dataURItoBlob(canvas.toDataURL(type, quality), {});\n  });\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@uppy/utils/lib/canvasToBlob.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}}],"sources":{"../node_modules/@uppy/utils/lib/canvasToBlob.js":"var dataURItoBlob = require('./dataURItoBlob');\n/**\n * Save a <canvas> element's content to a Blob object.\n *\n * @param {HTMLCanvasElement} canvas\n * @returns {Promise}\n */\n\n\nmodule.exports = function canvasToBlob(canvas, type, quality) {\n  if (canvas.toBlob) {\n    return new Promise(function (resolve) {\n      canvas.toBlob(resolve, type, quality);\n    });\n  }\n\n  return Promise.resolve().then(function () {\n    return dataURItoBlob(canvas.toDataURL(type, quality), {});\n  });\n};"},"lineCount":20}},"error":null,"hash":"f096edb103c424cd9e29314aa54ec600","cacheData":{"env":{}}}